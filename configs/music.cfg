## music (no caps) will be the music directory in the hdd's root folder ... anything different should be renamed

# Christmas stuff will not be sorted in this config .. again this is an IDEA
# tgc audio will not be sorted here as that is in a "/tgc/audio" root dev
# audiobooks MAY be sorted here


# here for now but this may be moved to the univeral.cfg file later
# this is for the subdir search
function getMusicDirList()
{
    # takes dir names you want to check for as arguements... at least ones you'd want to have a sorted sub_catagory files
    # checkForDir is an array of directory names to search for

    for eachDir in "${checkForDir[@]}"
    do

        echo -e "\n Directory Name: $eachDir"
        tree -I "*.nfo|*.jpg|*.png|*.log|*.txt" -P "*.mp3" "$eachDir" > $eachDir"_Catalog.txt"

        #read -p "Pause"
    done
}


# ?? how do things change with the new universal  functions that I didn't have before?


#######################################################

function reportOthersSubDir { 

    for subDir in $@
    {

        subDirsCatagoryfile=$othersCatDir"/"$subDirCheck"_Catalog.txt"

        echo -e "Catagorizing $subDirCheck folder"
        tree -P "*.mp3" -o $subDirsCatagoryfile $subDir
    }

}


function setupCatagoryDir {
    # Setup location to store catagory files

    echo -e "Checking for/Setting up Catagory destination directories"
    

    [ ! -d $localCatalogDir ] && mkdir "$localCatalogDir" && [ ! -d $hddCatalogDir ] && mkdir $hddCatalogDir

    echo -e "Catagory Locations created"

}




# the name of the function seems ok BUT ... it seems like the purpose of the function is the same as what is right below (function below )
# I THINK this was suppose to be for the main (Rock. others) "root" level checking 
function musicRootDirCheck() {

    mainDirFullPath="$@"
  
    echo -e  "\nInside musicSubDirCheck function"

    for eachMainDirFullPath in "$mainDirFullPath"
    do
        
        eachMainDir=$(basename $eachMainDirFullPath)
        musicRootOutputFile=$driveLabel"_"$currentDate"_"$eachMainDir"_MASTER_catalog.txt"

        setupCatagoryDir

        # is the touch part correct? 
        # this touch command i removed here may have been why they were created in the script folder 
            # I didn't want that 
        [ -d $eachMainDirFullPath ] && echo -e "$eachMainDir directory was found" && tree -R -P "*.mp3" $eachMainDirFullPath | tee "$localCatalogDir/$musicRootOutputFile" "$hddCatalogDir/$musicRootOutputFile"

    done
}


#######################################################################
# function that in passed an array of sub dirs from (for now i know it works ... not sure about nested things) the root /music dir 
function musicSubDirCheck(){

    # "as long as there is another subdir to check for"
    for subDirCheckFullPath in "$@";  do

        # IF the currently passed subdir (checking for) ACTUALLY EXISTS 
        if [ -d "$subDirCheckFullPath" ]; then

            echo -e "\n$subDirCheckFullPath dir found"

            # i dont want to use "genre" in the var name in case the name of the nested folder is not a genre
            currentSubCheck=$(basename $subDirCheckFullPath)

            # at no point does it say the name of the drive this is on
            subDirReports=$driveLabel"_"$currentDate"_"$eachMainDir"_"$currentSubCheck"_Catalog.txt"

            tree -P "*.mp3" $subDirCheckFullPath > $localCatalogDir/$subDirReports

        else
            echo -e "\n$subDirCheckFullPath directory, not found"

        fi

    done
    
}

# audio book question "audio books" "audiobooks" ???


#####################################################
# Meta function 
function mainGenreCheck(){ 
    
    # ONLY checks the subdirs existing IF the root (/Rock for example) exist or otherwise there is no point
    [ -d $othersDir ] && musicRootDirCheck $othersDir && read -p "About to run subdir checks" && musicSubDirCheck "${othersSubDirs[@]}" "$eachMainDir" && [ -d $RockDir ] && musicRootDirCheck $rockDir && musicSubDirCheck "${rockSubDirs[@]}" "$eachMainDir"
}