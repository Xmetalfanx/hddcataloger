# I think i will move this but for now i will leave it here 
# idea: pass array of subdir's to search for then pass (idea: for outputfilename i thin) a second argument subdirSection
function universalSubdirCheck()
{
    # subdirSearch = array passed


    ### test 
    #echo "${subDirSearch[@]}"
    ###

    for searchTerm in "${subDirSearch[@]}";
    do 
        # Test 
        echo -e "searchTerm: $searchTerm"

        ## end Test 
        ##################################
        # christmas hardcoded here is an example
        currentsubDirOutputFile="$driveLabel"_"$sectionTitle"_"$searchTerm"_"$currentdate"_Summary.txt

        # outputfiles for searchs created 
        touch $currentsubDirOutputFile

        subDirLocation=$driveRoot/$sectionTitle/$searchTerm

        ## how do i know where to search ... 
        # -h = print filesize in human readable form
        $(tree --dirsfirst --prune -I "*.jpg|*.png|*.nfo|*.part*" -h  -o $currentsubDirOutputFile $subDirLocation)

    
    done

}

function christmasRelatedSubDirSearch()
{

    # here we know "christmasRelated" exists
    ## HAVE WE created a master christmasRelated catalog file yet here though?

    sectionTitle="christmasRelated"
    
    
    # what to search for 
    subDirSearch=("music" "movies" "OTR")



    ## idea: i have christmasRelated in the hdd's root folder ... then inside of that I have say "music" "OTR" and "movies"
    ## what I want: to loop through some of those specific directories and create a sub-catalog folder for them 
        # idea: <hdd_label>_ChristmasRelated_<subcat_name>_<date>.txt or something like that for the name 
        
    
    # just passing array now, for the test
    
    # output is correct below
    #echo -e "pre-test output: ${subDirSearch[@]}"

    universalSubdirCheck "${subDirSearch[@]}" "$sectionTitle"
}



#################### code for non-movie and non-tv shows ##############################

# this is for the specific sub-dir checks ... not sure if it'd work for the overall checks
function getReportCustomDirs() 
{

    # results is the same var in both getReport functions 

    # -I : what file types to include
    # --dirsfirst: sort directories before files (not all in alphabetical order)
    # --prune: (WHEN USED WITH -I ) prunes out empty directories from output 

    # ?? do these need to be in vars? 
    dirCheckDetailedOutput=$(tree -I "*.jpg|*.png|*.nfo|*.tbn|*.txt|*.sh" --dirsfirst --prune -o $outputFileDetailed $results)
    dirCheckSummaryOutput=$(tree -d --prune -o $outputFileSummary $results)

}


# Meta function
function checkForVideoDir() {

 clear 
    echo -e "Checking for custom videos /videos directory. now"

    # check for vids dir (/videos, in the root location) first, if it doesn't exist, there is no need to proceed
    if [ -d "$customVidsDir" ]; then 
        
        # 1 - Generates a report for the entire /videos dir
        # 2 - Adds free space note/message
        # 3 - moves said file from #1 to ~ (home folder) of current running linux
        completeReportCustomVid

        # Here the TOTAL /videos catalog file will be dealt with 

        # this only checks for subdirs of /videos and not "sub-sub" dirs (etc)
        ## nte to self: this can take multple arguements 
        clear

        read -p "Checking for Specific sub-directories to create more specific catalog files of "
        universalCheckForDirs "$educationalDir"

    ## this doesn't make sense here .... this should be (I think) sort of inside "checkForSpecificSubDirs"
    elif [ ! -d "$customVidsDir" ]; then
        echo -e "videos directory not detected"

    else
        echo -e "Error detecting videos directory, on $driveLabel"
    fi 
}
