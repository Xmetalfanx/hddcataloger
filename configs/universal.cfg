# idea: this should be done before any moving to the final locations (documents folder and the hdd) is done
function organizeMainCatalogFiles() {
    
    # for each top level catagory present 
    for eachTopLevelCatPresent in $@
    {
        # where to put the sorted catagory files IF found 
        # This is a folder name
        # var name was ok for testing but it seems too generic in practice now
        sortDestination=$eachTopLevelCatPresent"_Catalogs"
        


        # was good in testing but my question now is what is the PWD? 
        # do i leave the cat files in the script dir and then orgaize AND THEN move the organzied dir of cat files?
        search4CatFiles=$(ls *$eachTopLevelCatPresent*.txt 2>/dev/null)

        # idea: these folders should be inside of some "master" folder that SHOULD display the date and drive label i think
        # note: the TOP level folder that these folders are in should show the date and label ... these do not have to
        
        #if the sort destination folder doesn't already exist ... create it 
        [ ! -d $sortDestination ] && mkdir $sortDestination


        # for each FOUND file in the pwd (??) .. do the following 
        for eachMainCatFileFound in ${search4CatFiles[@]};
        do 
            # change to cp for testing 
            # mv when done 
            mv $eachMainCatFileFound -t $sortDestination 

            # ?? call sub-sorting here? 
        done 
         
    }
}


# copies hdd catalog file to home folder location
function universalCopyReportFiles()
{

    homeLocation=$catalogHomeDir$driveLabel

    echo -e "\nCopying created text files to Home/Documents/Catalog folder\n"

    # if home dir to store catalog files DOES NOT exist, create it
    [ ! -d "$homeLocation" ] && mkdir $homeLocation

    # check the pwd to make sure we are in the script dir
    echo -e "Copying Summary Catalog file to Home Folder location and the external hdd's root: $driveRoot"
    cp *hdd*.txt $homeLocation && cp *hdd*.txt $driveRoot


    # remove any cat files in the script dir
    echo
    echo "Removing catalog files in the script directory"
    rm *.txt

}

function universalOutputFreeSpace() {

    freespaceLeft=$(df -h /dev/sdb* | grep "/dev/sdb*"| awk ' { print $4 } ')

    # if the freespace line DOESN'T exist (the grep check)
    if ! grep -Fxq "Freespace" $@; then

        for currentCatalogFile in $@
        do
            echo -e "\nFreespace left on drive: $freespaceLeft" >> "$currentCatalogFile"
        done
    fi
}

# refactoring idea
function universalOutputFreeSpace_refactored_TODO() {

    freespaceLeft=$(df -h /dev/sdb* | grep "/dev/sdb*"| awk ' { print $4 } ')

    # If the freespace line DOES exist
    # is the no outer loop here like in the original function a problem? 
    # POTENTIAL ISSUE: if the line is detected, does it check the second argument? 
    [ $(grep -Fxq "Freespace" $@) ] && return 

    for currentCatalogFile in "${@}"
    do
        echo -e "\nFreespace left on drive: $freespaceLeft" >> "$currentCatalogFile"
    done
   
}

#####################################################

# Outputs extended report and summary report to file
function universalGetReports()
{

    # Details
    # -I: Ignore
    # --dirsfirst: Sort Directories before files
    # --prune: prune out empty directories
    # --du -h: prints the dir/folder size next to the dir name - useful info if i have to refactor drives later 
    # -o <filename>: where to output all of this
    $(tree -I "*.jpg|*.png|*.nfo|*.tbn|*.txt|*.sh" --dirsfirst --prune --du -h -o $detailedOutputFilename $driveRoot/$search)

    #summary
    $(tree -d --prune -o $summaryOutputFilename $driveRoot/$search)

    # put call to add free space function here
    universalOutputFreeSpace $summaryOutputFilename $detailedOutputFilename


}
##################################################################################3

## Meta function
# right now i only have root level file checks calling this
function universalCheckForDirs()
{

    ## code comment: this var name is TOO generic 
    # "as long as there is another search term passed" is what i think this for loop is for 
    for search in $@
    {

        echo -e "Checking for ${search}"

        # If the dir (argument passed), exists ... aka, are a root level dir in the drive)
        if [ -d "$driveRoot/$search" ]; then
            echo -e "$search directory found"

            # Place to put output
            summaryOutputFilename="$driveLabel"_"$search"_$currentDate"_Summary_Catalog".txt
            detailedOutputFilename="$driveLabel"_"$search"_$currentDate"_Detailed_Catalog".txt

            # this function has lines for adding the freespace code and moving the files
            echo -e "About to create master file for $search"
            universalGetReports

            case $search in
                christmas_related) christmasRelatedSubDirSearch ;;
                tgc) tgcSubDirSearch ;;
            esac

        else
            read -p "$search directory NOT found"
        fi
    }
}


#####################################################################################

# to handle all of the steps including free space and moving files
# moved here for organizing reasons
function subDirReports() {
    ##########################################
    # Test
    #read -p "inside subDirReports function"
    # End Test output
    ##################################################

    # -h = print filesize in human readable form
    $(tree --dirsfirst --prune -I "*.jpg|*.png|*.nfo|*.part*|*.srt" -h --du -h -o $currentsubDirOutputFile $subDirLocation)

    # Add filesize to end of file
    # not sure if the pass here is really needed
    universalOutputFreeSpace $currentsubDirOutputFile
}

function universalSubdirCheck() {

    # subdirSearch = array passed

    # subDir: each element in the array
    for subDir in "${subDirSearch[@]}";
    do
        currentsubDirOutputFile="$driveLabel"_"$currentDate"_"$sectionTitle"_"$subDir"_Summary.txt
        case $dirLevel in

            "root")
                subDirLocation="$subDir"
                [ -d $subDirLocation ] && echo -e "$sectionTitle - $subDir DIR found" && subDirReports $subDir  ;;

            "customVids")
                subDirLocation="$customVidsDir/$subDir"
                [ -d $subDirLocation ] && echo -e "$sectionTitle - $subDir DIR found" && subDirReports $subDir ;;

            *) echo -e "dirLevel variable not set/set correctly"

        esac
    done
}

########################################################################
# moved here from hddCatalog.sh 

function catalogMusicFiles()
{
    
    echo -e "Checking for Music files"
    # if the music dir exists ... the echo here is sort of a test and can be removed later 
    [ -d "$musicDir" ] && mainDirMusicCheck
}

# not really needed, but for the "root folders" that have audio and video files INSIDE
function catalogMultiRoot()
{
    echo -e "Checking for Christmas and TGC related content"

    universalCheckForDirs "christmas_related" "tgc" "parents_movies"
}

function catalogVideoFiles()
{
    
    echo -e "Checking for Video Directories"

    ## Checks for a movies and tvshows dir in the root of the ext. hdd being checked
    # things here should be in the root folder of the external hdd 
    universalCheckForDirs "movies" "tvshows"

    # run check for custom vids
    checkForVideoDir
}
