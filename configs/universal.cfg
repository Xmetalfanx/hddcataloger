
function purgeCatalogFilesFromScriptDir()
{
    # remove any cat files in the script dir
    echo
    read -p "Removing catalog files in the script directory"
    rm *.txt

}


# copies hdd catalog file to home folder location
function universalCopyReportFiles()
{

    catalogHomeDir="/home/$USER/Documents/Catalog/"

    echo -e "\nCopying created text files to Home/Documents/Catalog folder\n"

    # if home dir to store catalog files DOES NOT exist, create it
    if [ ! -d "$catalogHomeDir" ]; then
        echo -e "Creating Directory to store catalog files in /Home/<user here>/Documents/Catalog"
        mkdir $catalogHomeDir
    fi

    specificCatDirHomeDir="$catalogHomeDir/$driveLabel"

    # if the specific dirs for each hdd are not there, create the dir for current hdd
    if [ ! -d "$specificCatDirHomeDir" ]; then
        mkdir "$specificCatDirHomeDir"
    fi

    if [ -f $summaryOutputFilename ]; then

        echo -e "Copying Summary Catalog file to hdd root: $driveRoot"
        cp $summaryOutputFilename $driveRoot

        echo -e "Copying Summary Catalog file to Home Folder location"
        # copy the files to the home folder location
        cp $summaryOutputFilename $specificCatDirHomeDir

    fi


    if [ -f $detailedOutputFilename ]; then

        echo -e "Copying Detailed Catalog file to hdd root: $driveRoot"
        # note to self: this will fail  ownership permissions are bad
        cp $detailedOutputFilename $driveRoot

        echo -e  "Copying Detailed Catalog file to Home Folder location"
        # copy the files to the home folder location
        cp $detailedOutputFilename $specificCatDirHomeDir
    fi

}

function universalOutputFreeSpace() {
    # idea: would it be easier to simplify the if statements below by passing an argument to this function that is
    # the filename and then the check just has to be done on say $1 ? 


    freespaceLeft=$(df -h /dev/sdb* | grep "/dev/sdb*"| awk ' { print $4 } ')

    # test
    #echo -e  "About to check for Freespace line in file "
    
    if ! grep -Fxq "Freespace" $@; then 
        for currentCatalogFile in $@
        do
            echo -e "\nFreespace left on drive: $freespaceLeft" >> "$currentCatalogFile"
        done 
    fi 
    
    
}

#####################################################

# Outputs extended report and summary report to file
function universalGetReports()
{
    # -dirsfirst = directories all above files
    # -prune = prune out empty directories

    # Details
    # -I = Ignore 
    $(tree -I "*.jpg|*.png|*.nfo|*.tbn|*.txt|*.sh" --dirsfirst --prune -o $detailedOutputFilename $driveRoot/$search)

    #summary
    $(tree -d --prune -o $summaryOutputFilename $driveRoot/$search)

    # put call to add free space function here
    universalOutputFreeSpace $summaryOutputFilename $detailedOutputFilename

    # Function call to copy reports
    universalCopyReportFiles
}
##################################################################################3

## Meta function
function universalCheckForDirs()
{
    # 2> /dev/null = to not display the output

    for search in $@
    {

        # Place to put output
        ## dir's could be root level like "movies" OR
        summaryOutputFilename="$driveLabel"_"$search"_$currentdate"_Summary".txt
        detailedOutputFilename="$driveLabel"_"$search"_$currentdate"_Detailed".txt

        # If the dir (argument passed), exists
        if [ -d "$driveRoot/$search" ]; then
            read -p "$search directory found"

            # this function has lines for adding the freespace code and moving the files 
            universalGetReports
       
            # note to self: the main .sh file and why things are checked there are for MASTER files
            # what i mean is a file without subdirs sorted in a sense ... the sorting happens due to the case 
            # statement below and the functions called 
            case $search in 
                christmas_related) christmasRelatedSubDirSearch ;;
                tgc) tgcSubDirSearch ;;
            esac 

        else
            read -p "$search directory NOT found"
        fi
    }
}


#####################################################################################

# idea: pass array of subdir's to search for then pass (idea: for outputfilename i thin) a second argument subdirSection
function universalSubdirCheck()
{
    # subdirSearch = array passed

    for searchTerm in "${subDirSearch[@]}";
    do 
        

        # if the searched term exists as a dir
        if [ -d "$customVidsDir/$searchTerm" ]; then

            echo -e "$searchTerm DIR found"

            # christmas hardcoded here is an example
            currentsubDirOutputFile="$driveLabel"_"$sectionTitle"_"$searchTerm"_"$currentdate"_Summary.txt

            # outputfiles for searchs created 
            # problem: file is created if search for ... i only want it created IF the directory EXISTS 
            touch $currentsubDirOutputFile

            subDirLocation=$driveRoot/$sectionTitle/$searchTerm

            ## how do i know where to search ... 
            # -h = print filesize in human readable form
            $(tree --dirsfirst --prune -I "*.jpg|*.png|*.nfo|*.part*" -h  -o $currentsubDirOutputFile $subDirLocation)


            # Add filesize to end of file 
            # not sure if the pass here is really needed 
            universalOutputFreeSpace $currentsubDirOutputFile

        else 
            #debugging output 
            echo -e "$searchTerm DIR NOT found"

        fi 

    done
        # move files to desired location
}