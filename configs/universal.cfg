## This is sort of the catch all for things needed (vars or function) by both sets of functions .. tvshow and movies ... AND 'other videos"


############################### Vars #####################################

# I need to know the date that this was collected
currentdate=$(date +"%B_%d_%Y")
# example output: October_24_2020

# Gets the name of sdb 
# driveLabel seems to be better for when i am not running the script in the root of the ext drive


#driveLabel=$(lsblk -o LABEL /dev/sdb | sed 's/LABEL//g' | awk NF)

# Test only ... this may not be a good idea long term
driveRoot=$(lsblk /dev/sdb | awk '/part/  { print $7 } ')
driveLabel=$(basename $driveRoot)

############################### End Vars #####################################


function copyToHomeFolder()
{

    catalogHomeDir="/home/$USER/Documents/Catalog/"

    echo -e "Copying created text files to Home/Documents/Catalog folder"


    if [ ! -d "$catalogHomeDir" ]; then
        mkdir $catalogHomeDir
    fi 

    specificCatDirHomeDir="$catalogHomeDir/$driveLabel"

    if [ ! -d "$specificCatDirHomeDir" ]; then
        mkdir "$specificCatDirHomeDir"
    fi 

    cp $outputFileSummary $specificCatDirHomeDir
    cp $outputFileDetailed $specificCatDirHomeDir

    # just shows the user that the file is now in their home folder 
    #ls $catalogHomeDir

}

#just a meta function that i can call that does the top two functions in one steps . the idea is make the code cleaner
function postReportSteps()
{
    outputfreeSpace
    copyToHomeFolder
}





# looks more like a universal function 

function loopThroughFiles()
{
    # var names? ... 
    for eachFile in dir 
    do

        


    done 
}



# this is for the FIRST level (of /videos) section checking only 
# This should make files that contain that main sub dir (and everything in it, into a single "subdir" (again first level only... further sorting comes later) tree command file 
function mainSubDirOutput()
{
    currentSubDirOutputFile="$currentDate"_"$driveLabel"_Edu_"$currentSubSecName".txt
    tree -I "*.jpg|*.png|*.nfo|*.tbn|*.txt|*.sh|*.srt" --dirsfirst --prune -o $currentSubDirOutputFile $currentSubSecDir

}

# this is only for the main sub-section 
function checkSubVidsDirs() 
{
    # takes two vars
    # 1= currenSubSecName .. this is used to name the file
    # 2= currentSubSecDir


    # I think i need a (main) subsection name var ... and then a "sub sub section var" this one would be what sends things to sorting functions 
        # currentSubSecName would be the main sub (say "educational" ) var check 
    
    
    

    
    # idea only 
    if [[ "$currenSubSecName" == "educational" ]]
        metaEduSubDirCheck
        
        
        # pass to Educational sorting function
        # subsubsection name needed here .. where is that even assigned? 
            
            # $currentSubSectionDir is a full path... exactly "/videos/educational/tgc"

            # i am thinking of a find command ... find --(two or one dash?)type d in $currentSubSecDir 

            # The Great Courses 
            tgcSearch=$(find .  "*" -printf '%f\n')
            
            # Jason Gibson 
            gibsonSearch=$(find .  "*.cfg" -printf '%f\n')


            if [ "$tgcSearch" ]


    fi 


    # do this AFTER the sorting 
    if [ -v $currentSubSecDir ]; then
       
        mainSubDirOutput

        #outputs free space info to each file and then moves the tree file to a /home/documents/Catalog location 
        postReportSteps        


    else
        ## only a test ... i will remove this ... maybe
        echo -e "$1 dir not found on this drive "
    fi 

}





# Problem here: the vars are not declared yet so i cant use this function here 
function outputfreeSpace() { 

    freespaceLeft=$(df -h /dev/sdb* | grep "/dev/sdb*"| awk ' { print $4 } ')


    # While there is probably a better way to do this ... 
    # the reason for this and no ELIF is "if both exist, I want the output to go to both"

    if [ -f $outputFileSummary ]; then
        echo -e "\n freespace left on drive: $freespaceLeft" >> "$outputFileSummary"
    fi 

    if [ -f $outputFileDetailed ]; then 
        echo -e "\n freespace left on drive: $freespaceLeft" >> "$outputFileDetailed"
    fi 


    # For sub-dir (in say /videos) checks
    ## THIS IS NOT GOING TO WORK ... too specific of a var  
    
    if [ -f $currentEduOutputFile ]; then 
        echo -e "\n freespace left on drive: $freespaceLeft" >> "$currentEduOutputFile"
    fi
}


#####################################################
function getReport() 
{
    extendedResuts=$(tree -I "*.jpg|*.png|*.nfo|*.tbn|*.txt|*.sh" --dirsfirst --prune -o $outputFileDetailed $driveRoot/$results)
    summaryResults=$(tree -d --prune -o $outputFileSummary $driveRoot/$results)
}