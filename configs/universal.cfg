function organizeCatalogFiles
{
    for eachTopLevelCatPresent in $@
    {
        # where to put the sorted catagory files IF found 
        # This is a folder name
        sortDestination=$eachTopLevelCatPresent"_Catalogs"
        
        search4CatFiles=$(ls *$eachTopLevelCatPresent*.txt 2>/dev/null)

        [ ! -d $sortDestination ] && mkdir $sortDestination


        for eachMainCatFileFound in ${search4CatFiles[@]};
        do 
            # changed to cp for testing 
            # mv when done 
            mv $eachMainCatFileFound -t $sortDestination 

            # ?? call sub-sorting here? 
        done 
         
    }
}


# copies hdd catalog file to home folder location
function universalCopyReportFiles()
{

    echo -e "\nCopying created text files to Home/Documents/Catalog folder\n"

    # if home dir to store catalog files DOES NOT exist, create it
    [ ! -d "$catalogHomeDir/$driveLabel" ] && mkdir $catalogHomeDir/$driveLabel

    # check the pwd to make sure we are in the script dir
    echo -e "Copying Summary Catalog file to Home Folder location and the external hdd's root: $driveRoot"
    cp *hdd*.txt $catalogHomeDir/$driveLabel && cp *hdd*.txt $driveRoot

    # remove any cat files in the script dir
    # echo
    # read -p "Removing catalog files in the script directory"
    # rm *.txt

}

function universalOutputFreeSpace() {

    freespaceLeft=$(df -h /dev/sdb* | grep "/dev/sdb*"| awk ' { print $4 } ')

    # if the freespace line DOESN'T exist (the grep check)
    if ! grep -Fxq "Freespace" $@; then

        for currentCatalogFile in $@
        do
            echo -e "\nFreespace left on drive: $freespaceLeft" >> "$currentCatalogFile"
        done
    fi


}

#####################################################

# Outputs extended report and summary report to file
function universalGetReports()
{

    # Details
    # -I: Ignore
    # --dirsfirst: Sort Directories before files
    # --prune: prune out empty directories
    # -o <filename>: where to output all of this
    $(tree -I "*.jpg|*.png|*.nfo|*.tbn|*.txt|*.sh" --dirsfirst --prune -o $detailedOutputFilename $driveRoot/$search)

    #summary
    $(tree -d --prune -o $summaryOutputFilename $driveRoot/$search)

    # put call to add free space function here
    universalOutputFreeSpace $summaryOutputFilename $detailedOutputFilename


}
##################################################################################3

## Meta function
# right now i only have root level file checks calling this
function universalCheckForDirs()
{

    ## this var name is TOO generic
    for search in $@
    {

        # Place to put output
        ## dir's could be root level like "movies" OR
        summaryOutputFilename="$driveLabel"_"$search"_$currentDate"_Summary_Catalog".txt
        detailedOutputFilename="$driveLabel"_"$search"_$currentDate"_Detailed_Catalog".txt

        # If the dir (argument passed), exists
        if [ -d "$driveRoot/$search" ]; then
            echo -e "$search directory found"

            # this function has lines for adding the freespace code and moving the files
            echo -e "About to create master file for $search"
            universalGetReports

            case $search in
                christmas_related) christmasRelatedSubDirSearch ;;
                tgc) tgcSubDirSearch ;;
            esac

        else
            read -p "$search directory NOT found"
        fi
    }
}


#####################################################################################

# to handle all of the steps including free space and moving files
# moved here for organizing reasons
function subDirReports() {
    ##########################################
    # Test
    #read -p "inside subDirReports function"
    # End Test output
    ##################################################

    # -h = print filesize in human readable form
    $(tree --dirsfirst --prune -I "*.jpg|*.png|*.nfo|*.part*|*.srt" -h -o $currentsubDirOutputFile $subDirLocation)

    # Add filesize to end of file
    # not sure if the pass here is really needed
    universalOutputFreeSpace $currentsubDirOutputFile
}

function universalSubdirCheck()
{
    #for debugging
    #read -p "inside universalSubdirCheck"

    # subdirSearch = array passed

    # subDir: each element in the array
    for subDir in "${subDirSearch[@]}";
    do
        currentsubDirOutputFile="$currentDate"_"$driveLabel"_"$sectionTitle"_"$subDir"_Summary.txt
        case $dirLevel in

            "root")
                subDirLocation="$subDir"
                [ -d $subDirLocation ] && echo -e "$sectionTitle - $subDir DIR found" && subDirReports $subDir  ;;

            "customVids")
                subDirLocation="$customVidsDir/$subDir"
                [ -d $subDirLocation ] && echo -e "$sectionTitle - $subDir DIR found" && subDirReports $subDir ;;

            *) echo -e "dirLevel variable not set/set correctly"

        esac
    done
}