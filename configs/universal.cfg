## This is sort of the catch all for things needed (vars or function) by both sets of functions .. tvshow and movies ... AND 'other videos"


############################### Vars #####################################

# I need to know the date that this was collected
currentdate=$(date +"%B_%d_%Y")
# example output: October_24_2020

# Gets the name of sdb 
# driveLabel seems to be better for when i am not running the script in the root of the ext drive


#driveLabel=$(lsblk -o LABEL /dev/sdb | sed 's/LABEL//g' | awk NF)

# Test only ... this may not be a good idea long term
driveRoot=$(lsblk /dev/sdb | awk '/part/  { print $7 } ')
driveLabel=$(basename $driveRoot)

############################### End Vars #####################################
function checkSubVidsDirs() 
{
    # takes two vars
    # 1=currentEduName .. this is used to name the file
    # 2= current Educational section dir (if applies)

    if [ -v $2 ]; then
        # the idea is to make this re-usable
        currentSubDirSectionDir=$2
        
        # the filename with EDU will be a problem where 
        currentSubDirOutputFile="$currentDate"_"$driveLabel"_Edu_"$currentEduName".txt

        tree -I "*.jpg|*.png|*.nfo|*.tbn|*.txt|*.sh|*.srt" --dirsfirst --prune -o $currentSubDirOutputFile $currentSubDirSectionDir

    else
        ## only a test ... i will remove this ... maybe
        echo -e "$1 dir not found on this drive "
    fi 

    # check output files in the functions that this function uses 
    postReportSteps

}





# Problem here: the vars are not declared yet so i cant use this function here 
function outputfreeSpace() { 

    freespaceLeft=$(df -h /dev/sdb* | grep "/dev/sdb*"| awk ' { print $4 } ')


    # While there is probably a better way to do this ... 
    # the reason for this and no ELIF is "if both exist, I want the output to go to both"

    if [ -f $outputFileSummary ]; then
        echo -e "\n freespace left on drive: $freespaceLeft" >> "$outputFileSummary"
    fi 

    if [ -f $outputFileDetailed ]; then 
        echo -e "\n freespace left on drive: $freespaceLeft" >> "$outputFileDetailed"
    fi 


    # For sub-dir (in say /videos) checks
    ## THIS IS NOT GOING TO WORK ... too specific of a var  
    
    if [ -f $currentEduOutputFile ]; then 
        echo -e "\n freespace left on drive: $freespaceLeft" >> "$currentEduOutputFile"
    fi
}

function copyToHomeFolder()
{

    catalogHomeDir="/home/$USER/Documents/Catalog/"

    echo -e "Copying created text files to Home/Documents/Catalog folder"


    if [ ! -d "$catalogHomeDir" ]; then
        mkdir $catalogHomeDir
    fi 

    specificCatDirHomeDir="$catalogHomeDir/$driveLabel"

    if [ ! -d "$specificCatDirHomeDir" ]; then
        mkdir "$specificCatDirHomeDir"
    fi 

    cp $outputFileSummary $specificCatDirHomeDir
    cp $outputFileDetailed $specificCatDirHomeDir

    # just shows the user that the file is now in their home folder 
    #ls $catalogHomeDir

}

#just a meta function that i can call that does the top two functions in one steps . the idea is make the code cleaner
function postReportSteps()
{
    outputfreeSpace
    copyToHomeFolder
}



#####################################################
function getReport() 
{
    extendedResuts=$(tree -I "*.jpg|*.png|*.nfo|*.tbn|*.txt|*.sh" --dirsfirst --prune -o $outputFileDetailed $driveRoot/$results)
    summaryResults=$(tree -d --prune -o $outputFileSummary $driveRoot/$results)
}